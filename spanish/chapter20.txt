{:: encoding="UTF-8" /}

# Infiriendo sitios de splicing

## DESCRIPCIÓN DEL PROBLEMA

Un marcador de secuencia expresada (mas conocida por sus siglas en inglés, EST) es una pequeña subsecuencia de un nucleótido transcripto (tanto que codifique a proteína o no). Se lo puede usar para identificar transcriptos de genes y son claves para el descubrimiento de genes y determinación de secuencias. Se ha trabajado mucho en la identificación de ETS, al punto que en las bases públicas hay aproximadamente 75 millones.

Un EST es producido por una secuenciación de un clon de  ARNm. La secuencia resultante es un fragmento de relativamente baja calidad, cuyo tamaño está limitado por la tecnologías de secuenciación, entre 500 y 800 nucleótidos. Como esos clones consisten en ADN que es complementario al ARNm, los EST corresponden a genes expresados. Pueden estar presentes en las bases de datos tanto como ADNc/ARNm o como complemento inverso del ARNm, la cadena molde (template).

Una manera de encontrar sitios de corte y empalme (splicing) en secuencias de plantas es comparar, usando BLAST, esta secuencia con el genoma de una especie conocida como *Arabidopsis thaliana* (AT). Luego alineamos nuestra secuencia tanto con la secuencia completa como con la secuencia codificante (CDS) con la coincidencia mas cercana. Con esta técnica podemos inferir intrones, exones y sitios de corte y empalme. Un programa para realizar esto debe primero hacer una búsqueda BLAST, luego usar el ID de la secuencia resultante para buscar dicha secuencia en la base de datos de las secuencias de AT. Esta base de datos, en este caso hecha en SQLite, debe ser hecha primero. Con todas las secuencias, usaremos **ClustalwCommandline** de **Biopython** para alinearlas.

Las secuencias completas y CDS pueden ser descargadas desde el sitio de TAIR en <https://www.arabidopsis.org>[^nota20-1]

[^nota20-1]: Secuencia completa en <https://www.arabidopsis.org/download_files/Genes/TAIR10_genome_release/TAIR10_blastsets/TAIR10_seq_20101214_updated>. y CDS en <https://www.arabidopsis.org/download_files/Genes/TAIR10_genome_release/TAIR10_blastsets/TAIR10_cds_20101214_updated>.

En el listado 20.1 se puede ver el programa preparatorio para hacer la base de datos SQLite con las secuencias completas y los CDS:

**Listado 20.1:** `makedb.py`: Conversión de datos para ingresarlos a una base de datos SQLite.

```
import sqlite3
from Bio import SeqIO

seq_file = open('../../samples/TAIR10_seq_20101214_updated')
cds_file = open('../../samples/TAIR10_cds_20101214_updated')
AT_DB_FILE = 'AT.db'

at_d = {}
# Get all sequences from TAIR sequences file.
for record in SeqIO.parse(seq_file, 'fasta'):
  sid = record.id
  seq = str(record.seq)
  at_d[sid] = [seq]
# Get all sequences from TAIR CDS file.
for record in SeqIO.parse(cds_file, 'fasta'):
  sid = record.id
  seq = str(record.seq)
  at_d[sid].append(seq)
# Write to a CSV file only the entries of the dictionary that
# has data from both source
  conn = sqlite3.connect(AT_DB_FILE)
  c = conn.cursor()
  c.execute('create table seq(id, cds, full_seq)')
  for seq_id in at_d:
    if len(at_d[seq_id])==2:
      # Write in this order: ID, CDS, FULL_SEQ.
      c.execute('INSERT INTO seq VALUES (?,?,?)',
        ((seq_id, at_d[seq_id][1], at_d[seq_id][0])))
conn.commit()
conn.close()
```

El listado 20.1 crea una base de datos SQLite llamada `AT.db`. Esta base tiene una tabla (*seq*) y esta tabla tiene 3 campos: *ids*, *cds*, *full_seq*.
Para formatear la base de datos de TAIR de CDS en formato de BLAST, hay que ejecutar:

{line-numbers=off}
```
$ makeblastdb -in TAIR10_cds_20101214_updated -dbtype nucl -out T10
```

### Inferiendo sitios de corte y empalme con código fuente comentado

**Listado 20.2:** `estimateintrons.py`: Estimar intrones.

```
#!/usr/bin/env python

import argparse
import os
import sqlite3

from Bio import SeqIO, SeqRecord, Seq
from Bio.Align.Applications import ClustalwCommandline
from Bio.Blast import NCBIXML
from Bio.Blast.Applications import NcbiblastnCommandline as bn
from Bio import AlignIO

AT_DB_FILE = 'AT.db'
BLAST_EXE = '~/opt/ncbi-blast-2.6.0+/bin/blastn'
BLAST_DB = '~/opt/ncbi-blast-2.6.0+/db/TAIR10'
CLUSTALW_EXE = '../../clustalw2'

def allgaps(seq):
    """Return a list with tuples containing all gap positions
       and length. seq is a string."""
    gaps = []
    indash = False
    for i, c in enumerate(seq):
        if indash is False and c == '-':
            c_ini = i
            indash = True
            dashn = 0
        elif indash is True and c == '-':
            dashn += 1
        elif indash is True and c != '-':
            indash = False
            gaps.append((c_ini, dashn+1))
    return gaps

def iss(user_seq):
    """Infer Splicing Sites from a FASTA file full of EST
    sequences"""

    with open('forblast','w') as forblastfh:
        forblastfh.write(str(user_seq.seq))

    blastn_cline = bn(cmd=BLAST_EXE, query='forblast',
                      db=BLAST_DB, evalue='1e-10', outfmt=5,
                      num_descriptions='1',
                      num_alignments='1', out='outfile.xml')
    blastn_cline()
    b_record = NCBIXML.read(open('outfile.xml'))
    title = b_record.alignments[0].title
    sid = title[title.index(' ')+1 : title.index(' |')]
    # Polarity information of returned sequence.
    # 1 = normal, -1 = reverse.
    frame = b_record.alignments[0].hsps[0].frame[1]
    # Run the SQLite query
    conn = sqlite3.connect(AT_DB_FILE)
    c = conn.cursor()
    res_cur = c.execute('SELECT CDS, FULL_SEQ from seq '
                        'WHERE ID=?', (sid,))
    cds, full_seq = res_cur.fetchone()
    if cds=='':
        print('There is no matching CDS')
        exit()
    # Check sequence polarity.
    sidcds = '{0}-CDS'.format(sid)
    sidseq = '{0}-SEQ'.format(sid)
    if frame==1:
        seqCDS = SeqRecord.SeqRecord(Seq.Seq(cds),
                                     id = sidcds,
                                     name = '',
                                     description = '')
        fullseq = SeqRecord.SeqRecord(Seq.Seq(full_seq),
                                      id = sidseq,
                                      name='',
                                      description='')
    else:
        seqCDS = SeqRecord.SeqRecord(
            Seq.Seq(cds).reverse_complement(),
            id = sidcds, name='', description='')
        fullseq = SeqRecord.SeqRecord(
            Seq.Seq(full_seq).reverse_complement(),
            id = sidseq, name = '', description='')
    # A tuple with the user sequence and both AT sequences
    allseqs = (record, seqCDS, fullseq)
    with open('foralig.txt','w') as trifh:
        # Write the file with the three sequences
        SeqIO.write(allseqs, trifh, 'fasta')
    # Do the alignment:
    outfilename = '{0}.aln'.format(user_seq.id)
    cline = ClustalwCommandline(CLUSTALW_EXE,
                                infile = 'foralig.txt',
                                outfile = outfilename,
                                )
    cline()
    # Walk over all sequences and look for query sequence
    for seq in AlignIO.read(outfilename, 'clustal'):
        if user_seq.id in seq.id:
            seqstr = str(seq.seq)
            gaps = allgaps(seqstr.strip('-'))
            break
    print('Original sequence: {0}'.format(user_seq.id))
    print('\nBest match in AT CDS: {0}'.format(sid))
    acc = 0
    for i, gap in enumerate(gaps):
        print('Putative intron #{0}: Start at position {1}, '
              'length {2}'.format(i+1, gap[0]-acc, gap[1]))
        acc += gap[1]
    print('\n{0}'.format(seqstr.strip('-')))
    print('\nAlignment file: {0}\n'.format(outfilename))

description = 'Program to infer intron position based on ' \
    'Arabidopsis Thaliana genome'
parser = argparse.ArgumentParser(description=description)
ifh = 'Fasta formated file with sequence to search for introns'
parser.add_argument('input_file', help=ifh)
args = parser.parse_args()
seqhandle = open(args.input_file)
records = SeqIO.parse(seqhandle, 'fasta')
for record in records:
    iss(record)
```

### Muestra de ejecución del programa para estimar intrones:

{line-numbers=off}
```
$ python estimateintrons.py ../../samples/t3.fasta
Original sequence: secu3

Best match in AT CDS: AT1G14990.1
Putative intron #1: Start at position 171, length 95
Putative intron #2: Start at position 250, length 153

CTAGCCACTTCCAACGAGTTGGCCTTGAGATAGAAGGTGAGCCATGTATTGGGAGTGGTAAA<=
CGTATGGAGATTTTCCCTGGCGATCAAAATGCTTAGCCATTATGCAGAATTCAACAGGACCG<=
GAATCTTCAGATTCATAGCCTTTCCCAAGCGCCGCTTTGTACAGCTT---------------<=
--------------------------------------------------------------<=
------------------AGCTGTGTCGGTCAAAAGTTCGGTGCCAGCAGTCGAAGATGCAT<=
AAAACTGATCTCCCCTGGAATATCCTGCTCTTGTT---------------------------<=
--------------------------------------------------------------<=
--------------------------------------------------------------<=
--GTGTTGTTTGTATAGAAGAATGTGAGGGCAGCAGTGAAGCAGTAGAATCCGGCGTAAGAG<=
ACAGCCCGTCGTAGCTTCTGGATAATTATAACCTCTGAGCGGTCATCCAAGATCATCAT

Alignment file: secu3.aln
```
